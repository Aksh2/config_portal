/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'akshay' at '20/12/17 12:52 PM' with Gradle 2.14.1
 *
 * 
 * 
 * 
 */

// Apply the java plugin to add support for Java
apply plugin: 'eclipse'
apply plugin: 'maven'

allprojects {
    apply plugin: 'java'
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
  
    maven {
    
        url "s3://g24x7.dev/lib/"
        
	credentials(AwsCredentials) {

           accessKey ACCESSKEY

           secretKey SECRETKEY

        }
    }
     maven {
    
        url "s3://g24x7.builds/releases/"
        
	credentials(AwsCredentials) {

           accessKey ACCESSKEY

           secretKey SECRETKEY

        }
    }
  
 		

}
configurations {
    agent
}
def spring_version = '4.2.5.RELEASE'
def slf_4j_version = '1.7.19'
def spring_mongodb_version = '1.8.4.RELEASE'

dependencies {

    println '----> compiling source'
    compile 'mysql:mysql-connector-java:5.1.35'
    compile 'com.jayway.restassured:rest-assured:2.5.0'
    compile 'com.jayway.jsonpath:json-path:2.1.0'
    compile 'com.google.code.gson:gson:2.4'
    compile 'commons-configuration:commons-configuration:1.10'
    compile 'commons-io:commons-io:2.4'  
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.6.0'
    compile 'org.yaml:snakeyaml:1.7'
    compile 'com.esotericsoftware.yamlbeans:yamlbeans:1.09'  
    compile 'org.testng:testng:6.9.8'
    compile 'log4j:log4j:1.2.16'
    compile 'com.google.code.gson:gson:2.3.1'
    compile "org.apache.zookeeper:zookeeper:3.4.8"
    compile 'net.sourceforge.htmlunit:htmlunit:2.19'
    compile 'org.seleniumhq.selenium:selenium-java:2.48.2'	
    compile 'io.appium:java-client:2.2.0'
    compile "org.springframework:spring-context:${spring_version}"
    compile "org.springframework:spring-core:${spring_version}"
    compile "org.springframework:spring-jdbc:${spring_version}"
    compile "org.eclipse.jetty.websocket:websocket-client:9.3.8.v20160314"
    compile "org.slf4j:slf4j-log4j12:${slf_4j_version}"
    
    compile 'com.rabbitmq:amqp-client:3.5.4'
	compile 'org.glassfish.tyrus.bundles:tyrus-standalone-client:1.9'
	compile 'javax.websocket:javax.websocket-all:1.1'
	compile 'com.googlecode.json-simple:json-simple:1.1.1'
	compile 'org.json:json:20160212'
	 
	compile "org.springframework.data:spring-data-mongodb:${spring_mongodb_version}"
    compile 'org.mongodb:mongo-java-driver:3.2.2'  
    compile 'cglib:cglib-nodep:3.2.1'
    compile group: 'com.jcraft', name: 'jsch', version: '0.1.53'
    compile group: 'sshtools', name: 'j2ssh-core', version: '0.2.9'
    println '----> automation framework source'
    compile 'com.games24x7:automation-framework:4.0'
    
    // https://mvnrepository.com/artifact/org.mock-server/mockserver-netty
    compile group: 'org.mock-server', name: 'mockserver-netty', version: '3.9.17'
    // https://mvnrepository.com/artifact/org.mockftpserver/MockFtpServer
	compile group: 'org.mockftpserver', name: 'MockFtpServer', version: '2.6'
	// https://mvnrepository.com/artifact/commons-net/commons-net
	compile group: 'commons-net', name: 'commons-net', version: '3.3'
	compile group: 'com.relevantcodes', name: 'extentreports', version: '2.41.1'
	compile group: 'com.aventstack', name: 'extentreports', version: '3.0.6'
	compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
	// https://mvnrepository.com/artifact/ch.ethz.ganymed/ganymed-ssh2
	compile group: 'ch.ethz.ganymed', name: 'ganymed-ssh2', version: 'build210'

	agent "org.aspectj:aspectjweaver:${aspectj_version}"
  	compile "ru.yandex.qatools.allure:allure-testng-adaptor:${allure_version}"
    
    compile 'org.apache.poi:poi:3.9'
    compile 'org.apache.poi:poi-ooxml:3.9'
    compile 'org.apache.poi:poi-ooxml-schemas:3.9'
    compile 'org.apache.poi:poi-scratchpad:3.9'
	compile 'org.apache.poi:ooxml-schemas:1.1'
	compile 'org.apache.poi:openxml4j:1.0-beta'  
    compile 'com.opencsv:opencsv:3.8'
    compile 'com.sun.mail:javax.mail:1.5.5'
	compile 'javax.mail:mail:1.5.0-b01'
	compile 'com.games24x7.frameworks:frameworks_core:1.58-SNAPSHOT'
    compile 'com.games24x7.frameworks:frameworks_edsevents:1.58-SNAPSHOT'
    // https://mvnrepository.com/artifact/com.google.gdata/core
	compile group: 'com.google.gdata', name: 'core', version: '1.47.1'
    
    compile group: 'org.springframework', name: 'spring-aspects', version: '4.3.5.RELEASE'
    
 }
 
 test {
 
     useTestNG {
      	//set TestNG output dir
    	 outputDirectory = file("$project.buildDir//testngOutput")
    	
    	//required to turn on TestNG reports
   		 useDefaultListeners = true
   
   		 String typeXml = System.getProperty('typeXml')
         suites "src/test/resources/${typeXml}"
         listeners << 'org.testng.reporters.EmailableReporter'
     }
     
      afterTest { desc, result -> 
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
    }
    
    testLogging {
        events "passed", "skipped", "failed"
        
    }
    
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
  	
    //add system property here
    test {
  	
  	systemProperty "ui.target", System.getProperty("ui.target")
  	
  	//if target is mobile set this environment variable
    	systemProperty "firefox.path", System.getProperty("firefox.path")
    	systemProperty "chrome.path", System.getProperty("chrome.path")
    	systemProperty "channel", System.getProperty("channel")
    	systemProperty "browser", System.getProperty("browser") 
    }
  	
 }
 
/* task generateAllureReport(type: Exec) {
        if(file("${allure_reports_directory}").exists()) {
           commandLine "/opt/allure", "report", "clean", "-o", "${allure_reports_directory}"
        }
        commandLine "/opt/allure", "generate", "${allure_results_directory}", "-o", "${allure_reports_directory}"
        ignoreExitValue = true
}

test.finalizedBy(generateAllureReport)*/

task openAllureReport(type: Exec) {
    	commandLine "/opt/allure", "report", "open", "-o", "${allure_reports_directory}"
}
 
 
 task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
 }

 task list(dependsOn: configurations.compile) << {
    println "classpath = ${configurations.compile.collect {File file -> file.name}}"
 }
 
 


